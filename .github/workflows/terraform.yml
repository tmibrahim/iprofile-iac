name: "Iprofile IAC"
on:
  push:
    branches:
      - main
      - stage
    paths:
      - terraform/**
  pull_request:
    branches:
      - main
    paths:
      - terraform/**

env:
  # S3 bucket for the Terraform state
  BUCKET_TF_STATE: ${{ vars.BUCKET_TF_STATE }}
  # AWS region
  AWS_REGION: ${{ vars.AWS_REGION }}
  # Eks cluster name
  EKS_CLUSTER: ${{ vars.EKS_CLUSTER }}
  # Role ARN to assume for GitHub Actions
  AWS_ROLE_ARN: ${{ vars.AWS_ROLE_ARN }}

jobs:
  terraform:
    name: "Apply terraform code changes"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Setup Terraform on the runner
        uses: hashicorp/setup-terraform@v3
        #with:
        #  terraform_version: 1.1.7
      
      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE" -backend-config="region=$AWS_REGION"

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Validate
        id: validate
        run: terraform validate
        
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out planfile

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1
        
      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -parallelisim=1 planfile

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Get Kube config file
        id: get-kubeconfig
        if: steps.apply.outcome == 'success'
        run: aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER }} --region ${{ env.AWS_REGION }}

      - name: Install Ingress Controller
        id: install-ingress
        if: steps.apply.outcome == 'success' && steps.get-kubeconfig.outcome == 'success'
        run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.3/deploy/static/provider/aws/deploy.yaml
        